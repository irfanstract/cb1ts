=== tests/cases/compiler/cbTsInferredTypes008.ts ===
// with the ITS flag being set to `medium` or `much`,
// a type-omitted const initialised with bare query of existing variable `my.bar` shall be typed `valueof my.bar`










const string1 = "hello" ;
>string1 : "hello"
>"hello" : "hello"

/** 
 * the RHS happens to conform to singleton type (specifically, a constant type), so
 * the resulting type shall not use the `typeof` notation but instead the contant type directly.
 */
const stringMeIn11A = string1 ;
>stringMeIn11A : "hello"
>string1 : "hello"






const minorVersions: [0, 1, 2, 3, ] = [0, 1, 2, 3, ] ;
>minorVersions : [0, 1, 2, 3]
>[0, 1, 2, 3, ] : [0, 1, 2, 3]
>0 : 0
>1 : 1
>2 : 2
>3 : 3

/** 
 * the RHS happens to conform to singleton type (specifically, a constant type), so
 * the resulting type shall not use the `typeof` notation but instead the contant type directly.
 */
const minorVersionsAgainAgain = minorVersions ;
>minorVersionsAgainAgain : [0, 1, 2, 3]
>minorVersions : [0, 1, 2, 3]

const minorVersionsAgainAgainEven: typeof minorVersions = minorVersions ;
>minorVersionsAgainAgainEven : [0, 1, 2, 3]
>minorVersions : [0, 1, 2, 3]
>minorVersions : [0, 1, 2, 3]

/** 
 * the RHS happens to conform to singleton type (specifically, a constant type), so
 * the resulting type shall not use the `typeof` notation but instead the contant type directly.
 */
const minorVersionsAgainAgainAgain = minorVersionsAgainAgain ;
>minorVersionsAgainAgainAgain : [0, 1, 2, 3]
>minorVersionsAgainAgain : [0, 1, 2, 3]

// const nonConstTupleAgain = [Math.random(), 3, Math.random(), ] ;






