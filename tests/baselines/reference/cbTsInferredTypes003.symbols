=== tests/cases/compiler/cbTsInferredTypes003.ts ===
const string1 = "hello" ;
>string1 : Symbol(string1, Decl(cbTsInferredTypes003.ts, 0, 5))

const stringPlex1A = ("hello" ) ;
>stringPlex1A : Symbol(stringPlex1A, Decl(cbTsInferredTypes003.ts, 2, 5))

const stringPlex1B = (("hello") ) ;
>stringPlex1B : Symbol(stringPlex1B, Decl(cbTsInferredTypes003.ts, 3, 5))

const stringPlex1C = ((("hello") ) ) ;
>stringPlex1C : Symbol(stringPlex1C, Decl(cbTsInferredTypes003.ts, 4, 5))
    


const stringStrong1: "hello" = "hello" ;
>stringStrong1 : Symbol(stringStrong1, Decl(cbTsInferredTypes003.ts, 8, 5))

const stringStrongPlex1B: "hello" = ( ("hello" ) ) ;
>stringStrongPlex1B : Symbol(stringStrongPlex1B, Decl(cbTsInferredTypes003.ts, 9, 5))

const stringStrongPlex1C: "hello" = ((("hello" ) ) ) ;
>stringStrongPlex1C : Symbol(stringStrongPlex1C, Decl(cbTsInferredTypes003.ts, 10, 5))

const stringStrong11: "hello" | "hi" = "hi" ;
>stringStrong11 : Symbol(stringStrong11, Decl(cbTsInferredTypes003.ts, 12, 5))

const stringStrongPlex1D: "hello" | "hi" = ("hi" ) ;
>stringStrongPlex1D : Symbol(stringStrongPlex1D, Decl(cbTsInferredTypes003.ts, 13, 5))

const stringStrongPlex1E: "hello" | "hi" = (("hi" ) ) ;
>stringStrongPlex1E : Symbol(stringStrongPlex1E, Decl(cbTsInferredTypes003.ts, 14, 5))

const stringStrongPlex1F: "hello" | "hi" = ((("hi" ) ) ) ;
>stringStrongPlex1F : Symbol(stringStrongPlex1F, Decl(cbTsInferredTypes003.ts, 15, 5))
    
// const stringMeIn11A = stringStrong11 ;





const majorVersionExplicit: 3 | 4 | 5 = 3 ;
>majorVersionExplicit : Symbol(majorVersionExplicit, Decl(cbTsInferredTypes003.ts, 23, 5))

const majorVersion = 3 ;
>majorVersion : Symbol(majorVersion, Decl(cbTsInferredTypes003.ts, 25, 5))





// const minorVersionsWeak = [0, 1, 2, 3, ] ;

// const minorVersions: [0, 1, 2, 3, ] = [0, 1, 2, 3, ] ;

// const minorVersionsAgainAgain = minorVersions ;

// const minorVersionsAgain2 = [0, 1, 2, 3, ] satisfies [unknown, ...unknown[] ] ;

// const minorVersionsAgain3 = [0, 1, 2, 3, ] satisfies [0, unknown, 2, ...unknown[] ] ;






// const desc = {
//     type: "color",
//     value: "blue",
//     specificity: 3,
// } ;






const value11 = 5 + majorVersion ;
>value11 : Symbol(value11, Decl(cbTsInferredTypes003.ts, 57, 5))
>majorVersion : Symbol(majorVersion, Decl(cbTsInferredTypes003.ts, 25, 5))

const string12 = `version ${ majorVersion }` ;
>string12 : Symbol(string12, Decl(cbTsInferredTypes003.ts, 58, 5))
>majorVersion : Symbol(majorVersion, Decl(cbTsInferredTypes003.ts, 25, 5))






// // type-mismatch
// const mf1 : 3 | 4 | 5 = 6 ;






